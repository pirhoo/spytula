{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Spytula","text":"<p>Spytula is a Python library for building JSON and YAML data structures easily. It provides a fluent and intuitive API to construct complex data hierarchies.</p>"},{"location":"#installation","title":"Installation","text":"<p>You can install Spytula using pip:</p> <pre><code>pip install spytula\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Spytula offers a simple and flexible way to build JSON and YAML data structures. Here's a quick example:</p> <pre><code>from spytula.builder import SpytulaBuilder\n\n# Create an instance of SpytulaBuilder\nbuilder = SpytulaBuilder()\n\n# Add attributes to the JSON structure\nbuilder.attribute('name', 'Ramen')\nbuilder.attribute('origin', 'Japan')\n\n# Create a list of ingredients\nfor builder.each('ingredients') as add_ingredient:    \n    for ingredient in ['Noodles', 'Pork', 'Eggs', 'Miso']:\n        with add_ingredient() as ingredient_builder:\n            ingredient_builder.attribute('name', ingredient)\n\n# Add optional attributes conditionally\nbuilder.when('spiciness', 'Medium', True)\nbuilder.when('extra_toppings', ['Green Onions', 'Nori', 'Bamboo Shoots'], True)\n\n# Configure the key to use camelcase\nbuilder.key_format(camelize={'uppercase_first_letter': False})\n\n# Convert the JSON structure to JSON-formatted string\njson_output = builder.to_json(indent=4)\n\n# Print the JSON output\nprint(json_output)\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>The documentation is generated from the docstrings in the code using the <code>mkdocstrings</code> plugin. It provides detailed information about the classes, methods, and attributes in the Spytula library.</p> <p>You can explore the API Documentation for more information.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! If you encounter any issues or have suggestions for improvements, please open an issue on the GitHub repository.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License. See the LICENSE file for more details.</p>"},{"location":"api/","title":"API Documentation","text":"<p>Welcome to the API documentation for Spytula. This section provides detailed information about the classes, methods, and attributes available in the Spytula library.</p>"},{"location":"api/#spytulabuilder","title":"SpytulaBuilder","text":"<p>The <code>SpytulaBuilder</code> class is the main class in Spytula that allows you to construct JSON and YAML data structures.</p> <p>         Bases: <code>DataFormattingMixin</code></p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>str</code> <p>The root key for the output JSON.</p> <code>None</code>"},{"location":"api/#spytula.builder.SpytulaBuilder.add_node","title":"add_node","text":"<pre><code>add_node(node_list)\n</code></pre> <p>Add a new node to the given list.</p> <p>Parameters:</p> Name Type Description Default <code>node_list</code> <code>List[Dict[str, Any]]</code> <p>The list to which the node will be added.</p> required Example <pre><code>with builder.add_node(ingredient_list) as ingredient_builder:\n    ingredient_builder.attribute(\"name\", \"Ramen Noodles\")\n</code></pre>"},{"location":"api/#spytula.builder.SpytulaBuilder.attribute","title":"attribute","text":"<pre><code>attribute(key, value)\n</code></pre> <p>Add a new attribute to the JSON.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key for the new attribute in the JSON.</p> required <code>value</code> <code>Any</code> <p>The value of the new attribute.</p> required Example <pre><code>builder.attribute(\"name\", \"Ramen Noodles\")\n</code></pre>"},{"location":"api/#spytula.builder.SpytulaBuilder.attributes","title":"attributes","text":"<pre><code>attributes(obj, keys)\n</code></pre> <p>Add multiple new attributes to the JSON.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Any</code> <p>The object from which the attributes' values will be retrieved.</p> required <code>keys</code> <code>List[str]</code> <p>A list of the keys for the new attributes in the JSON.</p> required Example <pre><code>ramen = {'name': 'Tonkotsu Ramen', 'type': 'Pork-based'}\nbuilder.attributes(ramen, ['name', 'type'])\n</code></pre>"},{"location":"api/#spytula.builder.SpytulaBuilder.each","title":"each","text":"<pre><code>each(key, items)\n</code></pre> <p>Iterate over a list of items and create a nested context for each item.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key for the new list in the JSON.</p> required <code>items</code> <code>List[Dict[str, Any]]</code> <p>The list of items to iterate over.</p> required <p>Returns:</p> Type Description <code>List[Tuple[SpytulaBuilder, Dict[str, Any]]]</code> <p>List[Tuple[SpytulaBuilder, Dict[str, Any]]]: A list of tuples containing the SpytulaBuilder instance and the current item.</p> Example <pre><code>ingredients = [\n    {'name': 'Noodles', 'type': 'Main'},\n    {'name': 'Pork', 'type': 'Protein'},\n    {'name': 'Eggs', 'type': 'Topping'},\n    {'name': 'Miso', 'type': 'Flavoring'},\n]\n\nfor ingredient_builder, ingredient in builder.each('ingredients', ingredients):\n    ingredient_builder.attribute('name', ingredient['name'])\n    ingredient_builder.attribute('type', ingredient['type'])\n</code></pre>"},{"location":"api/#spytula.builder.SpytulaBuilder.merge","title":"merge","text":"<pre><code>merge(data)\n</code></pre> <p>Merge given dictionary into the JSON data.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Dict[str, Any]</code> <p>Dictionary to merge.</p> required Example <pre><code>extra_info = {'rating': 4.5, 'spiciness': 'Medium'}\nbuilder.merge(extra_info)\n</code></pre>"},{"location":"api/#spytula.builder.SpytulaBuilder.node","title":"node","text":"<pre><code>node(key)\n</code></pre> <p>Create a new node to be added to the JSON.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key for the new node in the JSON.</p> required Example <pre><code>with builder.node(\"ingredients\") as ingredient_builder:\n    ingredient_builder.attribute(\"name\", \"Ramen Noodles\")\n</code></pre>"},{"location":"api/#spytula.builder.SpytulaBuilder.nodes","title":"nodes","text":"<pre><code>nodes(key)\n</code></pre> <p>Create a new list of nodes to be added to the JSON.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key for the new list in the JSON.</p> required Example <pre><code>ingredients = [\n    {'name': 'Noodles', 'type': 'Main'},\n    {'name': 'Pork', 'type': 'Protein'},\n    {'name': 'Eggs', 'type': 'Topping'},\n    {'name': 'Miso', 'type': 'Flavoring'},\n]\n\nwith builder.nodes('ingredients') as add_ingredient:\n    for ingredient in ingredients:\n        with add_ingredient() as ingredient_builder:\n            ingredient_builder.attribute('name', ingredient['name'])\n            ingredient_builder.attribute('type', ingredient['type'].upper())\n</code></pre>"},{"location":"api/#spytula.builder.SpytulaBuilder.partial","title":"partial","text":"<pre><code>partial(other_builder)\n</code></pre> <p>Merge given SpytulaBuilder instance into the current instance.</p> <p>Parameters:</p> Name Type Description Default <code>other_builder</code> <code>SpytulaBuilder</code> <p>SpytulaBuilder instance to merge.</p> required Example <pre><code>other_builder = SpytulaBuilder()\nother_builder.attribute('type', 'Ramen')\nbuilder.partial(other_builder)\n</code></pre>"},{"location":"api/#spytula.builder.SpytulaBuilder.root","title":"root","text":"<pre><code>root(key)\n</code></pre> <p>Set the root key for the output JSON.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The root key for the output JSON.</p> required Example <pre><code>builder = SpytulaBuilder()\nbuilder.root(\"ramen\")\n</code></pre>"},{"location":"api/#spytula.builder.SpytulaBuilder.to_json","title":"to_json","text":"<pre><code>to_json(*args, **kwargs)\n</code></pre> <p>Convert the data to a JSON-formatted string.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <p>Additional positional arguments to pass to json.dumps.</p> <code>()</code> <code>**kwargs</code> <p>Additional keyword arguments to pass to json.dumps.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A JSON-formatted string representing the data.</p> Example <pre><code>json_data = builder.to_json(indent=2)\nprint(json_data)\n</code></pre>"},{"location":"api/#spytula.builder.SpytulaBuilder.to_yaml","title":"to_yaml","text":"<pre><code>to_yaml(*args, **kwargs)\n</code></pre> <p>Convert the data to a YAML-formatted string.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <p>Additional positional arguments to pass to yaml.dump.</p> <code>()</code> <code>**kwargs</code> <p>Additional keyword arguments to pass to yaml.dump.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A YAML-formatted string representing the data.</p> Example <pre><code>yaml_data = builder.to_yaml()\nprint(yaml_data)\n</code></pre>"},{"location":"api/#spytula.builder.SpytulaBuilder.when","title":"when","text":"<pre><code>when(key, value, condition)\n</code></pre> <p>Add a new attribute to the JSON when the condition is met.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key for the new attribute in the JSON.</p> required <code>value</code> <code>Any</code> <p>The value of the new attribute.</p> required <code>condition</code> <code>bool or callable</code> <p>Condition to be met. Can be a boolean or a lambda function that takes a value                           and returns a boolean.</p> required Example <pre><code>builder.when('has_noodles', True, True)\n</code></pre>"},{"location":"contributing/","title":"Contributing to Spytula","text":"<p>Thank you for your interest in contributing to the Spytula project! We welcome contributions from the community to help improve and grow the library. This document provides guidelines and information on how you can contribute effectively.</p>"},{"location":"contributing/#ways-to-contribute","title":"Ways to Contribute","text":"<p>There are several ways you can contribute to the Spytula project:</p> <ol> <li> <p>Report Issues: If you encounter any bugs, issues, or have feature requests, please submit an issue on our GitHub repository. Include as much detail as possible to help us understand and address the problem.</p> </li> <li> <p>Provide Feedback: If you have feedback or suggestions for improving Spytula, we would love to hear from you. You can share your thoughts by opening a new issue or participating in discussions on existing issues.</p> </li> <li> <p>Submit Pull Requests: If you'd like to contribute code changes, bug fixes, or new features, you can submit a pull request. Follow the guidelines below to ensure a smooth review and merge process.</p> </li> </ol>"},{"location":"contributing/#development-setup","title":"Development Setup","text":"<p>To set up a development environment for Spytula, follow these steps:</p> <ol> <li>Clone the repository:</li> </ol> <pre><code>git clone https://github.com/example/spytula.git\n</code></pre> <ol> <li>Install the required dependencies:</li> </ol> <pre><code>cd spytula\npoetry install\n</code></pre> <ol> <li>Run tests to verify the setup:</li> </ol> <pre><code>poetry run pytest\n</code></pre>"},{"location":"contributing/#code-contribution-guidelines","title":"Code Contribution Guidelines","text":"<p>When contributing code changes, please adhere to the following guidelines:</p> <ul> <li>Fork the repository and create a new branch for your changes.</li> <li>Ensure your code follows the existing code style and conventions.</li> <li>Write clear and concise commit messages. We recommend using conventional commits.</li> <li>Include tests to cover your changes and ensure they pass.</li> <li>Update documentation as necessary.</li> <li>Submit a pull request to the <code>main</code> branch of the main repository.</li> </ul>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing to the Spytula project, you agree that your contributions will be licensed under the MIT License. You retain the copyright to your contributions.</p>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>We expect all contributors to follow the Code of Conduct when participating in the Spytula community.</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#adding-an-attribute","title":"Adding an attribute","text":"<p>To add attributes to the JSON or YAML data, use the <code>attribute</code> method:</p> <pre><code>builder.attribute('name', 'Ramen')\nbuilder.attribute('origin', 'Japan')\n</code></pre> <p>Which gives the following JSON output:</p> <pre><code>{\n\"name\": \"Ramen\",\n\"origin\": \"Japan\"\n}\n</code></pre>"},{"location":"usage/#adding-several-attributes","title":"Adding several attributes","text":"<p>To add attributes to the JSON or YAML data, use the <code>attributes</code> method:</p> <pre><code>dish = {\n  'name': 'Ramen',\n  'type': 'Japan',\n  'rating': 4.5\n}\n\nbuilder.attributes(dish, ['name', 'origin'])\n</code></pre> <p>Which gives the following JSON output:</p> <pre><code>{\n\"name\": \"Ramen\",\n\"origin\": \"Japan\"\n}\n</code></pre>"},{"location":"usage/#creating-single-node","title":"Creating single node","text":"<p>A single node can be created using the <code>node</code> method, which allows building nested structures:</p> <pre><code>with builder.node('dish') as dish:\n    dish.attribute('name', 'Ramen')\n    dish.attribute('origin', 'Japan')\n    dish.attribute('rating', 4.5)\n</code></pre> <p>Which gives the following JSON output:</p> <pre><code>{\n\"dish\": {\n\"name\": \"Ramen\",\n\"origin\": \"Japan\",\n\"rating\": 4.5\n}\n}\n</code></pre>"},{"location":"usage/#creating-lists-of-nodes","title":"Creating lists of nodes","text":"<p>Lists of nodes can be created using the <code>nodes</code> method:</p> <pre><code>with builder.nodes('ingredients') as add_ingredient:\n    with add_ingredient() as ingredient1:\n        ingredient1.attribute('name', 'Noodles')\n        ingredient1.attribute('type', 'Main')\n\n    with add_ingredient() as ingredient2:\n        ingredient2.attribute('name', 'Pork')\n        ingredient2.attribute('type', 'Protein')\n\n    with add_ingredient() as ingredient3:\n        ingredient3.attribute('name', 'Eggs')\n        ingredient3.attribute('type', 'Additional')\n</code></pre> <p>This is perfect when dealing with a collections:</p> <pre><code>ingredients = [\n    {'name': 'Noodles', 'type': 'Main'},\n    {'name': 'Pork', 'type': 'Protein'},\n    {'name': 'Eggs', 'type': 'Topping'},\n    {'name': 'Miso', 'type': 'Flavoring'},\n]\n\nwith builder.nodes('ingredients') as add_ingredient:\n    for ingredient in ingredients:\n        with add_ingredient() as ingredient_builder:\n            ingredient_builder.attribute('name', ingredient['name'])\n            ingredient_builder.attribute('type', ingredient['type'].upper())\n</code></pre> <p>Which gives the following JSON output:</p> <pre><code>{\n\"ingredients\": [\n{\n\"name\": \"Noodles\",\n\"type\": \"MAIN\"\n},\n{\n\"name\": \"Pork\",\n\"type\": \"PROTEIN\"\n},\n{\n\"name\": \"Eggs\",\n\"type\": \"TOPPING\"\n},\n{\n\"name\": \"Miso\",\n\"type\": \"FLAVORING\"\n}\n]\n}\n</code></pre> <p>You can also use the short-hand <code>each</code> method:</p> <pre><code>ingredients = [\n    {'name': 'Noodles', 'type': 'Main'},\n    {'name': 'Pork', 'type': 'Protein'},\n    {'name': 'Eggs', 'type': 'Topping'},\n    {'name': 'Miso', 'type': 'Flavoring'},\n]\n\nfor (ingredient_builder, ingredient) in builder.each('ingredients', ingredients):\n    ingredient_builder.attribute('name', ingredient['name'])\n    ingredient_builder.attribute('type', ingredient['type'].upper())\n</code></pre>"},{"location":"usage/#merging-data","title":"Merging data","text":"<p>You can merge data into the JSON using the <code>merge</code> method:</p> <pre><code>data = {'rating': 4.5, 'serving': 'Bowl'}\nbuilder.merge(data)\n</code></pre>"},{"location":"usage/#conditional-attributes","title":"Conditional attributes","text":"<p>You can add attributes conditionally using the <code>when</code> method:</p> <pre><code>builder.when('spicy', True, 'Chili' in ingredients)\n</code></pre>"},{"location":"usage/#converting-to-json","title":"Converting to json","text":"<p>To convert the builder to a JSON-formatted string, use the <code>to_json</code> method:</p> <pre><code>json_output = builder.to_json(ident=2)\nprint(json_output)\n</code></pre>"},{"location":"usage/#converting-to-yaml","title":"Converting to yaml","text":"<p>To convert the builder to a YAML-formatted string, use the <code>to_yaml</code> method:</p> <pre><code>yaml_output = builder.to_yaml()\nprint(yaml_output)\n</code></pre>"}]}